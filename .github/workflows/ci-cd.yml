name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ----------------------
      # 1. Checkout repository
      # ----------------------
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: false # This should be false to prevent the error
          fetch-depth: 0

      - name: List directory after checkout for debugging
        run: ls -R

      # ----------------------
      # 3. Setup Java for Backend
      # ----------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # ----------------------
      # 4. Cache Maven dependencies
      # ----------------------
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # ----------------------
      # 4. Make mvnw executable (Backend)
      # ----------------------
      - name: Make mvnw executable
        run: chmod +x ./Weatherly/mvnw

      # ----------------------
      # 5. Build Backend (Maven)
      # ----------------------
      - name: Build Backend (Maven)
        working-directory: Weatherly
        run: ./mvnw clean package -DskipTests

      # ----------------------
      # 6. Build Backend Docker Image
      # ----------------------
      - name: Build Backend Docker Image
        run: docker build -t 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-backend:latest ./Weatherly

      # ----------------------
      # 7. Setup Node.js for Frontend
      # ----------------------
      - name: List frontend app directory
        run: ls -la weather/myapp

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: weather/myapp/package-lock.json

      # ----------------------
      # 8. Install and Build Frontend
      # ----------------------
      - name: Install and Build Frontend
        working-directory: weather/myapp
        run: |
          npm ci
          npm run build

      # ----------------------
      # 10. Build Frontend Docker Image
      # ----------------------
      - name: Build Frontend Docker Image
        run: docker build -f weather/myapp/Dockerfile -t 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-frontend:latest weather/myapp

      # ----------------------
      # 11. Push Images to ECR (Optional - only if you deploy via AWS)
      # ----------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Backend Image
        run: |
          docker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-backend:latest

      - name: Push Frontend Image
        run: |
          docker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-frontend:latest

      # ----------------------
      # 12. Deploy to EC2 (via SSH)
      # ----------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/cicd_project
            git pull origin main
            docker compose pull
            docker compose up -d
